// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())

  name  String
  email String @unique
  image String
  role  Role   @default(STUDENT)

  class   Class?  @relation(fields: [classId], references: [id])
  classId String?

  schedule StudentSchedule?

  assessments Assessment[]

  SupportMessages SupportMessage[]

  Notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentSchedule {
  id String @id @default(uuid())

  student   Profile @relation(fields: [studentId], references: [id])
  studentId String  @unique

  scheduleItems ScheduleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleItem {
  id String @id @default(uuid())

  studentSchedule   StudentSchedule @relation(fields: [studentScheduleId], references: [id])
  studentScheduleId String
  subject           Subject         @relation(fields: [subjectId], references: [id])
  subjectId         String

  date DateTime

  startTime String
  endTime   String
  homework  String

  assessments Assessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id   String @id @default(uuid())
  name String

  scheduleItems ScheduleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id String @id @default(uuid())

  student        Profile      @relation(fields: [studentId], references: [id])
  studentId      String
  scheduleItem   ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  scheduleItemId String

  grade Float
  date  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  DEVELOPER
}

model School {
  id String @id @default(uuid())

  name       String @unique
  city       String
  phone      String @unique
  websiteUrl String @unique
  email      String @unique

  Filials Filial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Filial {
  id String @id @default(uuid())

  fullAddress  String @unique
  shortAddress String @unique
  role         String

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  Classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id String @id @default(uuid())

  name     String
  filial   Filial? @relation(fields: [filialId], references: [id])
  filialId String?

  students Profile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupportMessage {
  id String @id @default(uuid())

  city               String
  problemName        String
  problemDescription String
  answer             String?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())

  message String
  isRead  Boolean @default(false)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
