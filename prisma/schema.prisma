// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                 String               @id @default(uuid())
  name               String
  surname            String
  email              String               @unique
  phone              String?
  image              String?
  role               Role                 @default(STUDENT)
  groups             Group[]              @relation("StudentGroups")
  taughtGroups       Group[]              @relation("TeacherGroups")
  assessments        Assessment[]
  absences           Absence[]
  specialAssignments Homework[]           @relation("SpecialAssignments")
  homeworkStatuses   HomeworkCompletion[]
  notifications      Notification[]
  supportMessages    SupportMessage[]
  ScheduleItem       ScheduleItem[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Group {
  id            String         @id @default(uuid())
  name          String         @unique
  filial        Filial?        @relation(fields: [filialId], references: [id])
  filialId      String?
  scheduleItems ScheduleItem[]
  teachers      Profile[]      @relation("TeacherGroups")
  students      Profile[]      @relation("StudentGroups")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ScheduleItem {
  id             String           @id @default(uuid())
  group          Group            @relation(fields: [groupId], references: [id])
  groupId        String
  teacher        Profile          @relation(fields: [teacherId], references: [id])
  teacherId      String
  subject        Subject?         @relation(fields: [subjectId], references: [id])
  subjectId      String?
  type           ScheduleItemType @default(LESSON)
  name           String
  topic          String?
  startTime      DateTime
  endTime        DateTime
  room           String?
  recurring      Boolean          @default(false)
  recurrenceRule String?
  homework       Homework[]
  assessments    Assessment[]
  absences       Absence[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum ScheduleItemType {
  LESSON
  EVENT
}

model Homework {
  id             String               @id @default(uuid())
  scheduleItem   ScheduleItem         @relation(fields: [scheduleItemId], references: [id])
  scheduleItemId String
  date           DateTime
  description    String
  isSpecialized  Boolean              @default(false)
  assignees      Profile[]            @relation("SpecialAssignments")
  completions    HomeworkCompletion[]
  attachments    Attachment[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model HomeworkCompletion {
  id          String   @id @default(uuid())
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  homework    Homework @relation(fields: [homeworkId], references: [id])
  homeworkId  String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assessment {
  id             String        @id @default(uuid())
  grade          String
  date           DateTime
  gradeType      String
  category       GradeCategory @default(BASIC)
  profile        Profile       @relation(fields: [profileId], references: [id])
  profileId      String
  scheduleItem   ScheduleItem  @relation(fields: [scheduleItemId], references: [id])
  scheduleItemId String
  comment        String?
  academicYear   Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Absence {
  id             String       @id @default(uuid())
  type           AbsenceType  @default(UNAUTHORIZED)
  date           DateTime
  profile        Profile      @relation(fields: [profileId], references: [id])
  profileId      String
  scheduleItem   ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  scheduleItemId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Attachment {
  id         String   @id @default(uuid())
  url        String
  name       String
  homework   Homework @relation(fields: [homeworkId], references: [id])
  homeworkId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subject {
  id            String         @id @default(uuid())
  name          String         @unique
  scheduleItems ScheduleItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Filial {
  id            String       @id @default(uuid())
  fullAddress   String       @unique
  shortAddress  String       @unique
  role          String
  institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?
  groups        Group[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Institution {
  id         String   @id @default(uuid())
  name       String   @unique
  city       String
  phone      String   @unique
  websiteUrl String   @unique
  email      String   @unique
  filials    Filial[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SupportMessage {
  id                 String   @id @default(uuid())
  city               String
  problemName        String
  problemDescription String
  answer             String?
  profile            Profile  @relation(fields: [profileId], references: [id])
  profileId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  DEVELOPER
}

enum GradeCategory {
  BASIC
  ADVANCED
}

enum AbsenceType {
  NONE
  UNAUTHORIZED
  AUTHORIZED
  SICK
  EXEMPT
}
