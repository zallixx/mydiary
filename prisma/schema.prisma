// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())

  name  String
  email String @unique
  image String
  role  Role   @default(STUDENT)

  groups Group[]

  marks Assessment[]

  teacherGroups   Group[]        @relation(name: "teacherGroups")
  teacherSchedule ScheduleItem[] @relation(name: "teacherLessons")

  SupportMessages SupportMessage[]

  Notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  DEVELOPER
}

enum gradeCategory {
  BASIC
  ADVANCED
}

enum absenceType {
  NONE
  UNAUTHORIZED
  AUTHORIZED
  SICK
  EXEMPT
}

enum itemScheduleType {
  NONE
  REPLACEMENT
  ONLINE
  CANCELED
  TEST
}

enum studyResourcesType {
  TEST
  VIDEO
  THEORY
  PRESENTATION
}

model groupSchedule {
  id String @id @default(uuid())

  group Group? @relation(fields: [groupId], references: [id])
  groupId String @unique

  ItemSchedule ScheduleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleItem {
  id String @id @default(uuid())

  teacher   Profile @relation(fields: [teacherId], references: [id], name: "teacherLessons")
  teacherId String

  date DateTime

  duration Int @default(45)

  type itemScheduleType @default(NONE)

  homework Homework[]

  groupSchedule   groupSchedule @relation(fields: [groupScheduleId], references: [id])
  groupScheduleId String

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  absenceType absenceType @default(NONE)

  assessments Assessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Homework {
  id String @id @default(uuid())

  description String

  isCompleted Boolean @default(false)

  attachments studyResources[]

  fileAtachments FileAtachments[]

  itemSchedule   ScheduleItem @relation(fields: [itemScheduleId], references: [id])
  itemScheduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileAtachments {
  id String @id @default(uuid())

  url String

  homework   Homework @relation(fields: [homeworkId], references: [id])
  homeworkId String

  uploadAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model studyResources {
  id String @id @default(uuid())

  type studyResourcesType @default(THEORY)

  Homework   Homework? @relation(fields: [homeworkId], references: [id])
  homeworkId String?

  url  String
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id String @id @default(uuid())

  grade String

  date DateTime

  gradeType String

  category gradeCategory @default(BASIC)

  profile Profile @relation(fields: [profileId], references: [id])
  profileId String

  comment String?

  itemSchedule   ScheduleItem @relation(fields: [itemScheduleId], references: [id])
  itemScheduleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id String @id @default(uuid())

  name String @unique

  ItemSchedule ScheduleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id String @id @default(uuid())

  name       String @unique
  city       String
  phone      String @unique
  websiteUrl String @unique
  email      String @unique

  Filials Filial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Filial {
  id String @id @default(uuid())

  fullAddress  String @unique
  shortAddress String @unique
  role         String

  institution    Institution? @relation(fields: [institutionlId], references: [id])
  institutionlId String?

  groups Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(uuid())

  teacher Profile[] @relation(name: "teacherGroups")

  name     String
  filial   Filial? @relation(fields: [filialId], references: [id])
  filialId String?

  groupSchedule groupSchedule?

  students Profile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model SupportMessage {
  id String @id @default(uuid())

  city               String
  problemName        String
  problemDescription String
  answer             String?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())

  message String
  isRead  Boolean @default(false)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
